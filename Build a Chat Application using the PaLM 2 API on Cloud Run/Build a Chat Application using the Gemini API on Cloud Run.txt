What you will learn:
In this lab, you will create a web application that runs on Cloud Run which utilizes APIs provided by the Gemini Large Language Model (LLM) and surfaces them through a simple web interface deployed in the lab.

After this lab you will gain an understanding of how start building a web application which can utilize Large Language Models like Gemini to create engaging, conversation based interactions with end users who can asks questions and receive insightful responses through the chat application.

To complete the lab you will:

Build a Docker image to run the application using Cloud Build
Deploy a Cloud Run service that executes the application
Review python code to understand how the application utilizes the gemini-1.5-pro model via a chat session
Let's begin!


Task 1. Environment Setup
In order to deploy the Cloud Run application we will download the source from a Cloud Storage bucket.

Open a new Cloud Shell terminal and execute the following command.
gsutil cp -R gs://spls/gsp1201/chat-flask-cloudrun .
Copied!
Next, navigate to the folder of the project.
cd chat-flask-cloudrun
Copied!
Set the region and project environment variables referenced by subsequent commands.
export PROJECT_ID="Filled in at lab startup."
export REGION="Filled in at lab startup."
Copied!
Task 2. Build a Docker image
Next, you will build a Docker image for the application and push it to Artifact Registry. Once built and stored you will reference the container image to deploy the application to Cloud Run.

Set environment variables required.
export AR_REPO='chat-app-repo'
export SERVICE_NAME='chat-flask-app'
Copied!
Next, run the following command to create the Artifact Repository:
gcloud artifacts repositories create "$AR_REPO" --location="$REGION" --repository-format=Docker
Copied!
Configure Docker authentication and submit the container image build job to Cloud Build.
gcloud builds submit --tag "$REGION-docker.pkg.dev/$PROJECT_ID/$AR_REPO/$SERVICE_NAME"
Copied!
To verify if the image is pushed to the Artifact Registry, go to the Artifact Registry page. Left Menu > Artifact Registry. Confirm the chat-app-repo is available.
Artifact Repository

Click Check my progress to verify the objective.
Build a Docker image


Task 3. Deploy the application to Cloud Run
Now that the application has been downloaded and built via Cloud Build, you will now deploy and test it on Cloud Run.

In Cloud Shell, run the following command:
gcloud run deploy "$SERVICE_NAME" --port=8080 --image="$REGION-docker.pkg.dev/$PROJECT_ID/$AR_REPO/$SERVICE_NAME:latest" --allow-unauthenticated --region=$REGION --platform=managed --project=$PROJECT_ID --set-env-vars=GCP_PROJECT=$PROJECT_ID,GCP_REGION=$REGION
Copied!
Note: This step will take a few minutes to complete.
To launch the application, click the service URL provided in the output of the last command:
Service URL

Enter the following query into the input text box and click Send. You will receive a response generated by the PaLM 2 Chat Bison API in the output text box below the prompt input.
Output

Click Check my progress to verify the objective.
Deploy the application to Cloud Run


Task 4. Explore the python code
To understand more about how the application utilizes the Gemini Chat Bison API, you will briefly explore the code used by the app.

In Cloud Shell, click Open Editor which will provision a new Cloud Shell Editor for you to browse the code with.

Expand the folder chat-flask-app and select app.py to begin exploring the code.

Cloud Editor

There are a few python methods in this file which are important to note.
create_session: this method creates a new session with Vertex AI using the chat_model = GenerativeModel("gemini-1.5-pro") model. It is used by the route /gemini which you will observe further to establish a new chat session.
def create_session():
    chat_model = GenerativeModel("gemini-1.5-pro")
    chat = chat_model.start_chat()
    return chat
response: this method retrieves a response.
def response(chat, message):
    result = chat.send_message(message)
    return result.text
index and vertex_palm: the index and vertex_palm methods define routes for the application's API. The index method loads the index.html page when a user loads the application and the vertex_palm method submits the user's prompt collected from the index.html page to the API and returns the results in JSON format.
@app.route('/')
def index():
    ###
    return render_template('index.html')

@app.route('/gemini', methods=['GET', 'POST'])
def vertex_palm():
    user_input = ""
    if request.method == 'GET':
        user_input = request.args.get('user_input')
    else:
        user_input = request.form['user_input']
    logger.log(f"Starting chat session...")
    chat_model = create_session()
    logger.log(f"Chat Session created")
    content = response(chat_model,user_input)
    return jsonify(content=content)
The index.html file includes inline JavaScript to read the results from the form submission when a user clicks Send and updates the UI with the response of the PaLM 2 API call.

Congratulations!